#
# From: Jim Perrin <jperrin@gmail.com>
# Updated for RHEL 7 / CentOS 7  with addition of netinstall, using Draft v1 as reference
############## Secure Kickstart version 1.0 ##############
##########################################################
#
# Name: secure-kickstart.cfg
# Description: Kickstart file with many of the DISA STIG
#	       changes applied via %post functionality
# Distro: Centos/RHEL 7 & Fedora 25+
# 
#################### End User Notes ######################
#
#   There are a number of considerations to be made when 
# using this document. Partitioning space, system use, 
# and other tasks that make servers different.
#
####################### Usage ############################
#
# 1. Set up partitioning, or leave commented to get the 
#    anaconda partitioner. 
# 2. Review the package list. Add or remove as needed
# 3. This kickstart assumes a local mirror to install
#     from. Change this to suit your needs.

#install
#upgrade 
#cdrom
netinstall
#url --url http://192.168.1.1./installmedia
url --url https://mirror.cc.vt.edu/pub/fedora/linux/releases/test/26_Beta/Server/x86_64/os/ 
lang en_US.UTF-8
keyboard us
network --onboot=yes --bootproto=dhcp 
halt

########## !! CHANGE THIS !! ##########
# Changes if making an installer 
## TODO: Work in logic to check for dmsquash-live, using reduced sizes if on a live or making a live, and using these values if not.
partition /boot --fstype "xfs" --size=500 --ondisk=sda
partition /boot/efi --fstype "efi system partition" --size=500 --ondisk=sda
partition  linwin-crypt --size=0 --grow --ondisk=sda
volgroup linwin-crypt --pesize=256000
logvol swap --fstype swap --name=swap --vgname=linwin-crypt --size=4096
logvol / --fstype xfs --name=root --vgname=linwin-crypt --size=10240
logvol /var --fstype xfs --name=var --vgname=linwin-crypt --size=10240
logvol /home --fstype xfs --name=home --vgname=linwin-crypt --size=122880
logvol /tmp --fstype xfs --name=tmp --vgname=linwin-crypt --size=15360
logvol /opt --fstype xfs --name=opt --vgname=linwin-crypt --size=10240
logvol /usr --fstype xfs --name=usr --vgname=linwin-crypt --size=10240
logvol /usr/local --fstype xfs --name=usr_local --vgname=linwin-crypt --size=5120
logvol /usr/local/bin --fstype xfs --name=usr_local_bin --vgname=linwin-crypt --size=5120
logvol /scripts	--fstype xfs --name=scripts --vgname=linwin-crypt --size=1024
logvol /var/log --fstype xfs --name=var_log --vgname=linwin-crypt --size=10240
logvol /var/log/audit --fstype xfs --name=var_log_audit --vgname=linwin-crypt --size=10240
logvol /var/tmp --fstype xfs --name=var_tmp --vgname=linwin-crypt --size=15360
logvol /srv  --fstype xfs --name=srv --vgname=linwin-crypt  --size=15360
logvol /var/lmc --fstype xfs --name=var_lmc --vgname=linwin-crypt --size=51200

# STIG requires a passworded bootloader 
# grub2-mkpasswd-pbkdf2 using sha512 and a 22 character string
bootloader --location mbr --iscrypted --password=grub.pbkdf2.sha512.10000.3CF2E685F64BF673FC390927CE7CD27EA10D054DCFD5F1F24ADFBCD364DEDAD2B483841829AC8E9891D530F3C02E0D79F098CD07842A101A7599FC37CFFC1023.DD7457D84E226EE12D86B8EA73E40F4D90B35496AB32EB22CF9DDF9DD1BAA21BFB3F28610B380AB26C553FD6D4DA7E67CADE6D9B9651522E6E64A6C05FE7903B
# Configure authentication to FORCE /etc/*shadow, and enable kerberos and ldap
authconfig --enableshadow --enablemd5 --enablekrb5 --enableldap
selinux --enforcing
# Password generated with:
# python3 -c 'import crypt; print(crypt.crypt("26_character_string_here", crypt.mksalt(crypt.METHOD_SHA512)))'
# STIG and best practice require a strong root password. Preferrably with a sha256+ hash algorithm.
rootpw --iscrypted $6$KtknFXhK2jOa58cF$O7WBhsiv8Y1fz0LCmP0HgeStbj6VEVTAojQ3IrbWRNXhvIj2mOsefmGZKtH1zdBJcst4GBAvXOrzEq6jRZ8Z/1
# Set local time to EST, while indicating hardware clock is set to UTC
timezone --utc America/New_York
firewall --enabled --port=22:tcp  # This will be further restricted later
halt

########## UPDATE THE PACKAGE LIST #############
%packages --resolvedeps
# For bare systems, these are the groups you need initially.
@Base
@text-internet
@server-product-environment
@security-lab
@web-server
@editors
# For something with a gui, uncomment these
@gnome-desktop
@system-tools
@base-x
@graphics
@printing
@sound-and-video
@xfce-desktop
# Packages added for security
aide
audit
vlock
i3wm
logwatch
# Packages removed because we don't need/use them
-compiz
-emacs-leim
-emacspeak
-ethereal
-ethereal-gnome
-gnome-games
-isdn4k-utils
nmap
-octave
-oprofile
-rcs
tcpdump
-valgrind
zsh

%pre

%post --nochroot
#mkdir /mnt/sysimage/tmp/ks-tree-copy
#if [ -d /oldtmp/ks-tree-shadow ]; then
#    cp -fa /oldtmp/ks-tree-shadow/* /mnt/sysimage/tmp/ks-tree-copy
#elif [ -d /tmp/ks-tree-shadow ]; then
#    cp -fa /tmp/ks-tree-shadow/* /mnt/sysimage/tmp/ks-tree-copy
#fi
cp /etc/resolv.conf /mnt/sysimage/etc/resolv.conf

%post

## Log errors by creating one big subshell
(

if [ -f /etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-25-x86_64 || /etc/pki/rpm-gpg/RPM-GPG-KEY-RPM-GPG-KEY-fedora-26-x86_64 ]; then
  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY 
fi

############# Adding Security Enhancements ############################


################# User Login Security Changes #####################
# GEN000020 (G001)
# GEN000040 (G002)
# GEN000060 (G003)
# Require root password for single user mode
echo "Locking down GEN000020, GEN000040, GEN000060"
echo "Require the root pw when booting into single user mode" >> /usr/lib/systemd/systemd-initctl
echo "~~:S:wait:/sbin/sulogin" >> /usr/lib/systemd/systemd-initctl
echo "GEN000020, GEN000040,GEN000060 Complete"

## Prevent entering interactive boot
echo 'PROMPT=no' >> /etc/sysconfig/init
echo "Interactive Boot disabled"

# LNX00580 (L222)
echo "Locking down LNX00580"
perl -npe 's/ca::ctrlaltdel:\/sbin\/shutdown/#ca::ctrlaltdel:\/sbin\/shutdown/' -i /usr/lib/systemd/systemd-initctl
echo "LNX00580 Complete"


# We'll get to the updated versions once we configure pam.

# GEN000700
# Change the password expiration time,expiry warning time from undefined to 60 days
echo "Locking down GEN000700"
perl -npe 's/PASS_MAX_DAYS\s+99999/PASS_MAX_DAYS 60/' -i /etc/login.defs
chage -M 60 root
chage -W 7 root
chage -M 45 linuxmodder
chage -W 7 linuxmodder
echo "GEN000700 Complete"

# GEN000540
# Ensure that the user cannot change their password more than once a day.
echo "Locking down GEN000540"
perl -npe 's/PASS_MIN_DAYS\s+0/PASS_MIN_DAYS 1/g' -i /etc/login.defs
echo "GEN000540 Complete"

# GEN000480 (G015)
echo "Locking down GEN000480"
echo "Make the user waits four seconds if they fail after LOGIN_RETRIES" >> /etc/login.defs
echo "FAIL_DELAY 4" >> /etc/login.defs
echo "GEN000480 Complete"

# GEN000820
echo "Locking down GEN000820"
perl -npe 's/PASS_MIN_LEN\s+5/PASS_MIN_LEN  20/' -i /etc/login.defs
#STIG specifies using foloowing, but it's not a valid parameter
echo "GEN000820 Complete"

## Since RHEL/CentOS 5.3, authconfig supports SHA password encryption
## This cannot be set by default using auth earlier in the KS, so it must be done in %post
echo "Using SHA512 for the password algorithm"
authconfig --passalgo=sha512 --updateall
echo "Done"

###### PAM Modifications
# These modifications apply to GEN000460, GEN000600 and GEN000620
touch /var/log/tallylog
# for Centos 7.1 may need to create /etc/pam.d/system-auth-local as well
cat << 'EOF' > /etc/pam.d/system-auth-local
#%PAM-1.0
# Auth Section
auth sufficient pam_yubico.so mode=challenge-response
auth required pam_tally2.so unlock_time=900 onerr=fail no_magic_root
auth required pam_faildelay.so delay=5000000
auth include system-auth-ac
auth includ pam_yubico.so

# Accounts Section
account sufficient pam_yubico.so mode=challenge-response
account required pam_tally2.so
account include system-auth-ac
account include pam_yubico.so
# Password Section
password sufficient pam_yubico.so mode=challenge-response
password required pam_pwhistory.so   use_authtok remember=5 retry=3
password requisite pam_passwdqc.so min=disabled,disabled,16,12,8
password include system-auth-ac
password include pam_yubico.so

# Session Section
## By default we're only going to log what root does
## This gets really verbose if we log more.
## If you want to log everyone, remove disable=*
session sufficient pam_yubico.so mode=challenge-response
session required pam_tty_audit.so disable=* enable=root
session include system-auth-ac
session include pam_yubico.so
EOF


# Create some basic shell rules for users. 

echo "Idle users will be removed after 15 minutes"
echo "readonly TMOUT=600" >> /etc/profile.d/os-security.sh
echo "readonly HISTFILE" >> /etc/profile.d/os-security.sh
chmod +x /etc/profile.d/os-security.sh

# GEN002560
# Reset the umasks for all users to 077
echo "Locking down GEN002560"
perl -npe 's/umask\s+0\d2/umask 077/g' -i /etc/bashrc
perl -npe 's/umask\s+0\d2/umask 077/g' -i /etc/csh.cshrc
echo "GEN002560 Complete"


## Require GUI consoles to lock if idle longer than 10 minutes. 
if [ -f /etc/gconf/gconf.xml.mandatory ]; then 
  gconftool-2 --direct \
	--config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory \
	--type bool \
	--set /apps/gnome-screensaver/idle_activation_enabled true
  gconftool-2 --direct \
	--config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory \
	--type bool --set /apps/gnome-screensaver/lock_enabled true
  gconftool-2 --direct \
	--config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory \
	--type string \
	--set /apps/gnome-screensaver/mode blank-only
  gconftool-2 --direct \
	--config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory \
	--type int \
	--set /apps/gnome-screensaver/idle_delay 10
fi

## No one gets to run cron or at jobs unless we say so.
echo "Locking down Cron"
touch /etc/cron.allow
chmod 600 /etc/cron.allow
awk -F: '{print $1}' /etc/passwd | grep -v root > /etc/cron.deny
echo "Locking down AT"
touch /etc/at.allow
chmod 600 /etc/at.allow
awk -F: '{print $1}' /etc/passwd | grep -v root > /etc/at.deny

# GEN000400 (G010)
echo "Locking down GEN000400"
# Set the /etc/issue file to something scary.  This one has no linefeeds, so it will wrap accordingly.
# Change this to your own banner for organizations outside the Scary Zone

cat << 'EOF' >/etc/issue
USE OF THIS COMPUTER SYSTEM, OPERATED BY AMERIDEA, REGARDLESS WHETHER AUTHORIZED OR UNAUTHORIZED CONSTITUTES CONSENT TO MONITORING OF THIS SYSTEM.  UNAUTHORIZED USE MAY SUBJECT YOU TO CRIMINAL PROSECUTION.  EVIDENCE OF UNAUTHORIZED USE COLLECTED DURING MONITORING MAY BE USED FOR ADMINISTRATIVE, CRIMINAL, OR OTHER ADVERSE ACTION.  USE OF THIS SYSTEM CONSTITUTES CONSENT TO MONITORING FOR THESE PURPOSES.
EOF
echo "GEN000400 Completed"


# The banner above works great for shell logins, but won't work for gui logins. 
if [ -f /etc/gdm/PreSession/Default ]; then
# GEN000420 (G011)
# This part creates the same login banner once your username and password has been entered.  This has linefeeds in it.
# Text needs to be cleaned up a touch.
echo "Locking down GEN000420"
perl -npe 's/exit\s0/\n/' -i /etc/gdm/PreSession/Default

cat << 'EOF' >> /etc/gdm/PreSession/Default
/usr/bin/gdialog --yesno "Agree = 'OK'   Disagree = 'Cancel'

USE OF THIS COMPUTER SYSTEM, OPERATED BY AMERIDEA, REGARDLESS WHETHER AUTHORIZED OR UNAUTHORIZED CONSTITUTES CONSENT TO MONITORING OF THIS SYSTEM.  UNAUTHORIZED USE MAY SUBJECT YOU TO CRIMINAL PROSECUTION.  EVIDENCE OF UNAUTHORIZED USE COLLECTED DURING MONITORING MAY BE USED FOR ADMINISTRATIVE, CRIMINAL, OR OTHER ADVERSE ACTION.  USE OF THIS SYSTEM CONSTITUTES CONSENT TO MONITORING FOR THESE PURPOSES.

Agree = 'OK'   Disagree = 'Cancel'"
if ( test 1 -eq $? ); then
        /usr/bin/gdialog --infobox "Logging out in 10 Seconds" 1 20 &
        sleep 10
        exit 1
fi

exit 0
EOF
echo "GEN000420 Completed"
fi

## Harden audit  // git@github.com:virtadpt/rhel-hardening.git
cat <<EOF> /etc/audit/rules.d/hardened.rules
## This file is automatically generated from /etc/audit/rules.d
-D
-b 320

# Record any changes to the system clock.
-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
-a always,exit -F arch=b64 -S clock_settime -k time-change
-a always,exit -F arch=b32 -S clock_settime -k time-change
-w /etc/localtime -p wa -k time-change

# Record any alterations to the /etc/[passwd,group] files.
-w /etc/group -p wa -k identity
-w /etc/passwd -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /etc/gshadow -p wa -k identity
-w /etc/security/opasswd -p wa -k identity

# Record alterations to any system or network environment files.
-a exit,always -F arch=b64 -S sethostname -S setdomainname -k system-locale
-a exit,always -F arch=b32 -S sethostname -S setdomainname -k system-locale
-w /etc/issue -p wa -k system-locale
-w /etc/issue.net -p wa -k system-locale
-w /etc/hosts -p wa -k system-locale
-w /etc/sysconfig/network -p wa -k system-locale

# Record any attempts to change the system's SElinux configuration.
-w /etc/selinux/ -p wa -k MAC-policy

# Record changes to system login/logout log files.
-w /var/log/faillog -p wa -k logins
-w /var/log/lastlog -p wa -k logins
-w /var/log/btmp -p wa -k logins

# Record session initiation attempts.
-w /var/run/umtp -p wa -k session
-w /var/run/wmtp -p wa -k session

# Record changes to Discretionary Access Control settings.
-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod

# Record failed attempts to access files.
-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access
-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access
-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=500 -F auid!=4294967295 -k access
-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=500 -F auid!=4294967295 -k access

# Audit attempts to mount file systems.
-a always,exit -F arch=b64 -S mount -F auid>=500 -F auid!=4294967295 -k mounts
-a always,exit -F arch=b32 -S mount -F auid>=500 -F auid!=4294967295 -k mounts

# Audit file deletion.
-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete
-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete

# Note changes to users' scope that elevate privileges.
-w /etc/sudoers -p wa -k scope

# Monitor sudo logs.
-w /var/log/sudo.log -p wa -k actions
-w /var/log/sudo-io/ -p wa -k actions

# Audit loading and unloading of kernel modules.
-w /sbin/insmod -p x -k modules
-w /sbin/rmmod -p x -k modules
-w /sbin/modprobe -p x -k modules
-a always,exit -F arch=b64 -S init_module -S delete_module -k modules
EOF
## Harden auditd now  //  git@github.com:virtadpt/rhel-hardening.git
cat << EOF > /etc/audit/auditd.conf 
#
# This file controls the configuration of the audit daemon
#

log_file = /var/log/audit/audit.log
log_format = RAW
log_group = root
priority_boost = 4
flush = INCREMENTAL
freq = 20

# The maximum number of audit logs to store at any one time is 99.  That should
# give us time to migrate them off-system.
num_logs = 99

disp_qos = lossy
dispatcher = /sbin/audispd
name_format = NONE

# The maximum audit logfile size, in megabytes.
max_log_file = 50

# When the current audit log reaches its maximum size, rotate it.
max_log_file_action = ROTATE

# When the local storage array is down to a gig, panic.  E-mail the root user.
space_left = 1024
space_left_action = email
action_mail_acct = root

# When the local storage array is down to half a gig, panic harder.  Suspend
# audit logging until we get things sorted out.
admin_space_left = 512
admin_space_left_action = suspend

# When the local storage array is out of disk space, stop auditing.
disk_full_action = SUSPEND
disk_error_action = SUSPEND

##tcp_listen_port = 
tcp_listen_queue = 5
tcp_max_per_addr = 1
##tcp_client_ports = 1024-65535
tcp_client_max_idle = 0
enable_krb5 = no
krb5_principal = auditd
##krb5_key_file = /etc/audit/audit.key
EOF
################## File and Directory Security #########################

# Restrict mount points with noexec, nosuid, and nodev where applicable

# GEN002420
echo "Locking down GEN002420"
FSTAB=/etc/fstab
SED=/bin/sed

#nosuid on /home
if [ $(grep "[[:blank:]]\/home[[:blank:]]" ${FSTAB} | grep -c "nosuid") -eq 0 ]; then
        MNT_OPTS=$(grep "[[:blank:]]\/home[[:blank:]]" ${FSTAB} | awk '{print $4}')
        ${SED} -i "s/\([[:blank:]]\/home.*${MNT_OPTS}\)/\1,nosuid/" ${FSTAB}
fi

# nosuid on /sys
if [ $(grep "[[:blank:]]\/sys[[:blank:]]" ${FSTAB} | grep -c "nosuid") -eq 0 ]; then
        MNT_OPTS=$(grep "[[:blank:]]\/sys[[:blank:]]" ${FSTAB} | awk '{print $4}')
        ${SED} -i "s/\([[:blank:]]\/sys.*${MNT_OPTS}\)/\1,nosuid/" ${FSTAB}
fi

## nosuid on /boot
if [ $(grep "[[:blank:]]\/boot[[:blank:]]" ${FSTAB} | grep -c "nosuid") -eq 0 ]; then
        MNT_OPTS=$(grep "[[:blank:]]\/boot[[:blank:]]" ${FSTAB} | awk '{print $4}')
        ${SED} -i "s/\([[:blank:]]\/boot.*${MNT_OPTS}\)/\1,nosuid/" ${FSTAB}
fi

# nodev on /usr
if [ $(grep "[[:blank:]]\/usr[[:blank:]]" ${FSTAB} | grep -c "nodev") -eq 0 ]; then
        MNT_OPTS=$(grep "[[:blank:]]\/usr[[:blank:]]" ${FSTAB} | awk '{print $4}')
       ${SED} -i "s/\([[:blank:]]\/usr.*${MNT_OPTS}\)/\1,nodev/" ${FSTAB}
fi

#nodev on /home
if [ $(grep "[[:blank:]]\/home[[:blank:]]" ${FSTAB} | grep -c "nodev") -eq 0 ]; then
        MNT_OPTS=$(grep "[[:blank:]]\/home[[:blank:]]" ${FSTAB} | awk '{print $4}')
        ${SED} -i "s/\([[:blank:]]\/home.*${MNT_OPTS}\)/\1,nodev/" ${FSTAB}
fi

# nodev on /usr/local
if [ $(grep "[[:blank:]]\/usr/local[[:blank:]]" ${FSTAB} | grep -c "nodev") -eq 0 ]; then
        MNT_OPTS=$(grep "[[:blank:]]\/usr/local[[:blank:]]" ${FSTAB} | awk '{print $4}')
        ${SED} -i "s/\([[:blank:]]\/usr\/local.*${MNT_OPTS}\)/\1,nodev/" ${FSTAB}
fi

# nodev and noexec on /tmp
if [ $(grep "[[:blank:]]\/tmp[[:blank:]]" ${FSTAB} | grep -c "nodev") -eq 0 ]; then
        MNT_OPTS=$(grep "[[:blank:]]\/tmp[[:blank:]]" ${FSTAB} | awk '{print $4}')
        ${SED} -i "s/\([[:blank:]]\/tmp.*${MNT_OPTS}\)/\1,nodev,noexec/" ${FSTAB}
fi
# nodev and noexec on /var/tmp
if [ $(grep "[[:blank:]]\/var/tmp[[:blank:]]" ${FSTAB} | grep -c "nodev") -eq 0 ]; then
        MNT_OPTS=$(grep "[[:blank:]]\/tmp[[:blank:]]" ${FSTAB} | awk '{print $4}')
        ${SED} -i "s/\([[:blank:]]\/var/tmp.*${MNT_OPTS}\)/\1,nodev,noexec/" ${FSTAB}
fi

# nodev on /var
if [ $(grep "[[:blank:]]\/var[[:blank:]]" ${FSTAB} | grep -c "nodev") -eq 0 ]; then
       MNT_OPTS=$(grep "[[:blank:]]\/var[[:blank:]]" ${FSTAB} | awk '{print $4}')
        ${SED} -i "s/\([[:blank:]]\/var.*${MNT_OPTS}\)/\1,nodev/" ${FSTAB}
fi

echo "GEN002420 Complete"

# By default  /root has permissions of 750. Change this to 700
# GEN000920 (G023)
echo "Locking down GEN000920"
# Correct the permissions on /root to a DISA allowed 700
perl -npe 's/#PermitRootLogin yes/PermitRootLogin no/' -i /etc/ssh/sshd_config
echo "GEN001120 Complete"

#GEN005540
echo "Locking down GEN005540"
perl -npe 's/^#Banner \/some\/path/Banner \/etc\/issue/g' -i /etc/ssh/sshd_config
echo "GEN005540 Complete"

perl -npe 's/^#ServerKeyBits 768/ServerKeyBits 4096/g' -i /etc/ssh/sshd_config
perl -npe 's/^#MaxAuthTries 6/MaxAuthTries 3/g' -i /etc/ssh/sshd_config


################ Configure a better default firewall ###############
cat << 'EOF' > /etc/sysconfig/iptables-config
#Drop anything we aren't explicitly allowing. All outbound traffic is okay
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:RH-Firewall-1-INPUT - [0:0]
-A INPUT -j RH-Firewall-1-INPUT
-A FORWARD -j RH-Firewall-1-INPUT
-A RH-Firewall-1-INPUT -i lo -j ACCEPT
-A RH-Firewall-1-INPUT -p icmp --icmp-type echo-reply -j ACCEPT
-A RH-Firewall-1-INPUT -p icmp --icmp-type destination-unreachable -j ACCEPT
-A RH-Firewall-1-INPUT -p icmp --icmp-type time-exceeded -j ACCEPT
# Accept Pings
-A RH-Firewall-1-INPUT -p icmp --icmp-type echo-request -j ACCEPT
# Log anything on eth0 claiming it's from a local or non-routable network
# If you're using one of these local networks, remove it from the list below
-A INPUT -i eth0 -s 172.16.0.0/12 -j LOG --log-prefix "IP DROP SPOOF B: "
-A INPUT -i eth0 -s 192.168.0.0/16 -j LOG --log-prefix "IP DROP SPOOF C: "
-A INPUT -i eth0 -s 240.0.0.0/5 -j LOG --log-prefix "IP DROP SPOOF E: "
-A INPUT -i eth0 -d 127.0.0.0/8 -j LOG --log-prefix "IP DROP LOOPBACK: "
# Accept any established connections
-A RH-Firewall-1-INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
# Accept ssh traffic. Restrict this to known ips if possible.
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
#Log and drop everything else
-A RH-Firewall-1-INPUT -j LOG
-A RH-Firewall-1-INPUT -j DROP
COMMIT
EOF

###### Check to see if we have network access for updates ##########
# For RHEL systems, change the profile name and key
# Documentation for activation keys can be found at 
# http://kbase.redhat.com/faq/docs/DOC-2475
2>/dev/null >/dev/tcp/google.com/80
cat << 'EOF' >> /etc/dnf.conf
deltarpms=1
deltarpms_percentage=90
lock_on_fail=1
EOF
dnf -y update
dnf -y install aide audit vlock i3wm logwatch nmap zsh

################ Beef up the default ruleset for AIDE #################
# Setup AIDE off this baseline
echo "Setting up baseline AIDE configuration ...."
echo "NOTE!!! PLEASE REVIEW THIS, AND EDIT FOR YOUR SPECIFIC CONFIGURATION!"

# Write /etc/aide.conf
echo "Appending default setuid/setgid and 666 f/d to default /etc/aide.conf"
cat << 'EOF' >> /etc/aide.conf

# World-Writable files and directories
# Note: There are no ww files in the base install

# World-Writable Directories in base install

/tmp                            PERMS
/tmp/.pk11ipc1                  PERMS
/tmp/.font-unix                 PERMS
/tmp/.ICE-unix                  PERMS
/tmp/.X11-unix                  PERMS
/var/tmp                        PERMS

# set-UID and set-GID files in base install

/sbin/netreport                 PERMS
/usr/libexec/utempter/utempter  PERMS
/usr/sbin/lockdev               PERMS
/usr/sbin/sendmail.sendmail     PERMS
/usr/lib/vte/gnome-pty-helper   PERMS
/usr/bin/locate                 PERMS
/usr/bin/write                  PERMS
/usr/bin/wall                   PERMS
/usr/bin/ssh-agent              PERMS
/usr/bin/lockfile               PERMS
/usr/bin/screen                 PERMS
EOF

echo "done adding to /etc/aide.conf" 
echo ""
echo "Building a initial AIDE DB..."
/usr/sbin/aide -i
echo "Initial AIDE DB complete"
echo ""
echo "Copying initial AIDE DB to initial baseline AIDE DB..."
cp -p /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
echo "Done copying initital AIDE DB"
echo ""
echo ""
echo "Please review your AIDE configuration, default DB locations,"
echo "cron jobs, etc. to fit your needs"
echo ""
echo "GEN02440 and GEN2380 Complete"



) > /root/kickstart-log.txt 2>&1
